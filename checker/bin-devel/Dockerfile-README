This directory contains Dockerfiles to create new Docker images for
running Checker Framework tests reproducibly.

The rest of this file explains how to build new Docker images:

For opprop's Docker images building:

# Run ./docker_image_update.py to update opprop's Docker images
# automatically (pull the latest Docker images from upstream, then
# rebuild and upload opprop's Docker images to opprop's Docker Hub).
#
# Usage: python3 ./docker_image_update.py [-h] names [names ...]
#
# Positional arguments:
#   names       a list of docker images' names waiting for being rebuilt.
#
# For example, to update ubuntu-for-cfi-jdk8 and ubuntu-for-cfi-jdk11:
# python3 ./docker_image_update.py jdk8 jdk11
#
# Before executing the script file, open it and check if these information
# are correct:
#
# 1. upstream_dockerhub_username: username for upstream Docker Hub
# 2. upstream_dockerhub_repository_prefix: prefix for upstream Docker Hub's repos
# 3. dockerfile_prefix: prefix for Dockerfiles' names
# 4. opprop_dockerhub_username: username for opprop Docker Hub
# 5. opprop_dockerhub_repository_prefix: prefix for opprop Docker Hub's repos
# 5. auth_config: username and password for opprop's Docker Hub
#
# Update these fields with the latest information.

Preliminaries:

  # Finish docker setup if necessary.
  sudo usermod -aG docker $(whoami)
  # Then log out and back in.

  # Obtain Docker credentials.
  # (This is only necessary once per machine; credentials are cached.)
  docker login


Create the Docker image:

# Alias to create the Docker image, in an empty directory, and upload to Docker Hub.
# Takes about 12 minutes for jdk*, about 1 hour for jdk*-plus.
DOCKERTESTING=""
# DOCKERTESTING="-testing"
alias create_upload_docker_image=' \
  rm -rf dockerdir && \
  mkdir -p dockerdir && \
  (cd dockerdir && \
  \cp -pf ../Dockerfile-$OS-$JDKVER Dockerfile && \
  DOCKERIMAGE="wmdietl/$PROJECT-$OS-$JDKVER$DOCKERTESTING"
  docker build -t $DOCKERIMAGE . && \
  docker push $DOCKERIMAGE) && \
  rm -rf dockerdir'

export OS=ubuntu
export JDKVER=jdk8
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk8-plus
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk11
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk11-plus
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk17
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk17-plus
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk21
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk21-plus
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk-latest
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk-latest-plus
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk-next
export PROJECT=cf
create_upload_docker_image

export OS=ubuntu
export JDKVER=jdk-next-plus
export PROJECT=cf
create_upload_docker_image

Use numbered JDK releases for versions that should be supported longer term.
jdk-latest is for the latest release and jdk-next is for pre-releases of
the upcoming release.


Cleanup:

After creating docker images, if you are low on disk space,
consider deleting the docker containers.
To stop and remove/delete all docker containers:
  docker stop $(docker ps -a -q)
  docker rm $(docker ps -a -q)
or you can just remove some of them.
To really clean up the whole docker system:
  docker system prune --all --volumes
