import org.checkerframework.checker.units.qual.*;
import org.checkerframework.checker.units.qual.CheckOp;
import org.checkerframework.checker.units.qual.time.duration.*;
import org.checkerframework.checker.units.qual.time.instant.*;

import java.io.Serializable;
import java.lang.Comparable;

package java.lang;

// TODO: declaring the extends bounds in astub requires a top type annotation, not sure why

class Number { // implements Serializable
    @PolyUnit byte byteValue(@PolyUnit Number this);
    @PolyUnit short shortValue(@PolyUnit Number this);
    @PolyUnit int intValue(@PolyUnit Number this);
    @PolyUnit long longValue(@PolyUnit Number this);
    @PolyUnit float floatValue(@PolyUnit Number this);
    @PolyUnit double doubleValue(@PolyUnit Number this);
    Number();
}

class Byte { // extends Number implements Comparable<Byte>
    static @PolyUnit Byte valueOf(@PolyUnit byte arg0);
    @PolyUnit Byte(@PolyUnit byte arg0);

    @PolyUnit byte byteValue(@PolyUnit Byte this);
    @PolyUnit short shortValue(@PolyUnit Byte this);
    @PolyUnit int intValue(@PolyUnit Byte this);
    @PolyUnit long longValue(@PolyUnit Byte this);
    @PolyUnit float floatValue(@PolyUnit Byte this);
    @PolyUnit double doubleValue(@PolyUnit Byte this);

    String toString(@UnknownUnits Byte this);
    static String toString(@UnknownUnits byte arg0);
    int hashCode(@UnknownUnits Byte this);
    static int hashCode(@UnknownUnits byte arg0);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Byte this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Byte this, @UnknownUnits Byte arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits byte arg0, @UnknownUnits byte arg1);

    static @PolyUnit int toUnsignedInt(@PolyUnit byte arg0);
    static @PolyUnit long toUnsignedLong(@PolyUnit byte arg0);
}

class Short { // extends Number implements Comparable<Short>
    static @PolyUnit Short valueOf(@PolyUnit short arg0);
    @PolyUnit Short(@PolyUnit short arg0);

    @PolyUnit byte byteValue(@PolyUnit Short this);
    @PolyUnit short shortValue(@PolyUnit Short this);
    @PolyUnit int intValue(@PolyUnit Short this);
    @PolyUnit long longValue(@PolyUnit Short this);
    @PolyUnit float floatValue(@PolyUnit Short this);
    @PolyUnit double doubleValue(@PolyUnit Short this);

    String toString(@UnknownUnits Short this);
    static String toString(@UnknownUnits short arg0);
    int hashCode(@UnknownUnits Short this);
    static int hashCode(@UnknownUnits short arg0);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Short this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Short this, @UnknownUnits Short arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits short arg0, @UnknownUnits short arg1);

    static @PolyUnit short reverseBytes(@PolyUnit short arg0);
    static @PolyUnit int toUnsignedInt(@PolyUnit short arg0);
    static @PolyUnit long toUnsignedLong(@PolyUnit short arg0);
}

class Integer { // extends Number implements Comparable<Integer>
    static @PolyUnit Integer valueOf(@PolyUnit int arg0);
    @PolyUnit Integer(@PolyUnit int arg0);

    @PolyUnit byte byteValue(@PolyUnit Integer this);
    @PolyUnit short shortValue(@PolyUnit Integer this);
    @PolyUnit int intValue(@PolyUnit Integer this);
    @PolyUnit long longValue(@PolyUnit Integer this);
    @PolyUnit float floatValue(@PolyUnit Integer this);
    @PolyUnit double doubleValue(@PolyUnit Integer this);

    String toString(@UnknownUnits Integer this);
    static String toString(@UnknownUnits int arg0);
    static String toString(@UnknownUnits int arg0, int radix);
    static String toUnsignedString(@UnknownUnits int arg0);
    static String toUnsignedString(@UnknownUnits int arg0, int radix);
    static String toHexString(@UnknownUnits int arg0);
    static String toOctalString(@UnknownUnits int arg0);
    static String toBinaryString(@UnknownUnits int arg0);
    int hashCode(@UnknownUnits Integer this);
    static int hashCode(@UnknownUnits int arg0);

    // gets the integer value of system property name, if not possible it will return val instead
    static @PolyUnit Integer getInteger(String name, @PolyUnit int val);
    static @PolyUnit Integer getInteger(String name, @PolyUnit Integer val);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Integer this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Integer this, @UnknownUnits Integer arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits int arg0, @UnknownUnits int arg1);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compareUnsigned(@UnknownUnits int arg0, @UnknownUnits int arg1);

    static @PolyUnit long toUnsignedLong(@PolyUnit int arg0);

    // handled in units checker like division and remainder operators
    @UnitsTypeCheckAsOp(op=CheckOp.DIV)
    static int divideUnsigned(@UnknownUnits int arg0, @UnknownUnits int arg1);
    @UnitsTypeCheckAsOp(op=CheckOp.MOD)
    static int remainderUnsigned(@UnknownUnits int arg0, @UnknownUnits int arg1);

    static @PolyUnit int highestOneBit(@PolyUnit int arg0);
    static @PolyUnit int lowestOneBit(@PolyUnit int arg0);
    static int numberOfLeadingZeros(@UnknownUnits int arg0);
    static int numberOfTrailingZeros(@UnknownUnits int arg0);
    static int bitCount(@UnknownUnits int arg0);

    static @PolyUnit int rotateLeft(@PolyUnit int arg0, int distance);
    static @PolyUnit int rotateRight(@PolyUnit int arg0, int distance);
    static @PolyUnit int reverse(@PolyUnit int arg0);
    static int signum(@UnknownUnits int arg0);
    static @PolyUnit int reverseBytes(@PolyUnit int arg0);

    // handled in units checker like plus operator
    @UnitsTypeCheckAsOp(op=CheckOp.ADD)
    static int sum(@UnknownUnits int a, @UnknownUnits int b);

    static @PolyUnit int max(@PolyUnit int arg0, @PolyUnit int arg1);
    static @PolyUnit int min(@PolyUnit int arg0, @PolyUnit int arg1);
}

class Long { // extends Number implements Comparable<Long>
    static @PolyUnit Long valueOf(@PolyUnit long arg0);
    @PolyUnit Long(@PolyUnit long arg0);

    @PolyUnit byte byteValue(@PolyUnit Long this);
    @PolyUnit short shortValue(@PolyUnit Long this);
    @PolyUnit int intValue(@PolyUnit Long this);
    @PolyUnit long longValue(@PolyUnit Long this);
    @PolyUnit float floatValue(@PolyUnit Long this);
    @PolyUnit double doubleValue(@PolyUnit Long this);

    String toString(@UnknownUnits Long this);
    static String toString(@UnknownUnits long arg0);
    static String toString(@UnknownUnits long arg0, int arg1);
    static String toUnsignedString(@UnknownUnits long arg0);
    static String toUnsignedString(@UnknownUnits long arg0, int arg1);
    static String toHexString(@UnknownUnits long arg0);
    static String toOctalString(@UnknownUnits long arg0);
    static String toBinaryString(@UnknownUnits long arg0);

    int hashCode(@UnknownUnits Long this);
    static int hashCode(@UnknownUnits long arg0);

    static @PolyUnit Long getLong(String arg0, @PolyUnit long arg1);
    static @PolyUnit Long getLong(String arg0, @PolyUnit Long arg1);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Long this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Long this, @UnknownUnits Long arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits long arg0, @UnknownUnits long arg1);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compareUnsigned(@UnknownUnits long arg0, @UnknownUnits long arg1);

    // handled in units checker like division and remainder operators
    @UnitsTypeCheckAsOp(op=CheckOp.DIV)
    static long divideUnsigned(@UnknownUnits long arg0, @UnknownUnits long arg1);
    @UnitsTypeCheckAsOp(op=CheckOp.MOD)
    static long remainderUnsigned(@UnknownUnits long arg0, @UnknownUnits long arg1);

    static @PolyUnit long highestOneBit(@PolyUnit long arg0);
    static @PolyUnit long lowestOneBit(@PolyUnit long arg0);
    static int numberOfLeadingZeros(@UnknownUnits long arg0);
    static int numberOfTrailingZeros(@UnknownUnits long arg0);
    static int bitCount(@UnknownUnits long arg0);

    static @PolyUnit long rotateLeft(@PolyUnit long arg0, int arg1);
    static @PolyUnit long rotateRight(@PolyUnit long arg0, int arg1);
    static @PolyUnit long reverse(@PolyUnit long arg0);
    static int signum(@UnknownUnits long arg0);
    static @PolyUnit long reverseBytes(@PolyUnit long arg0);

    // handled in units checker like plus operator
    @UnitsTypeCheckAsOp(op=CheckOp.ADD)
    static long sum(@UnknownUnits long a, @UnknownUnits long b);

    static @PolyUnit long max(@PolyUnit long arg0, @PolyUnit long arg1);
    static @PolyUnit long min(@PolyUnit long arg0, @PolyUnit long arg1);
}

class Float { // extends Number implements Comparable<Float>
    static @PolyUnit Float valueOf(@PolyUnit float arg0);
    @PolyUnit Float(@PolyUnit float arg0);
    @PolyUnit Float(@PolyUnit double arg0);

    @PolyUnit byte byteValue(@PolyUnit Float this);
    @PolyUnit short shortValue(@PolyUnit Float this);
    @PolyUnit int intValue(@PolyUnit Float this);
    @PolyUnit long longValue(@PolyUnit Float this);
    @PolyUnit float floatValue(@PolyUnit Float this);
    @PolyUnit double doubleValue(@PolyUnit Float this);

    String toString(@UnknownUnits Float this);
    static String toString(@UnknownUnits float arg0);
    static String toHexString(@UnknownUnits float arg0);

    int hashCode(@UnknownUnits Float this);
    static int hashCode(@UnknownUnits float arg0);

    boolean isNaN(@UnknownUnits Float this);
    static boolean isNaN(@UnknownUnits float arg0);
    boolean isInfinite(@UnknownUnits Float this);
    static boolean isInfinite(@UnknownUnits float arg0);
    static boolean isFinite(@UnknownUnits float arg0);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Float this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Float this, @UnknownUnits Float arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits float arg0, @UnknownUnits float arg1);

    static @PolyUnit int floatToIntBits(@PolyUnit float arg0);
    static @PolyUnit int floatToRawIntBits(@PolyUnit float arg0);
    static @PolyUnit float intBitsToFloat(@PolyUnit int arg0);

    // handled in units checker like plus operator
    @UnitsTypeCheckAsOp(op=CheckOp.ADD)
    static float sum(@UnknownUnits float a, @UnknownUnits float b);

    static @PolyUnit float max(@PolyUnit float arg0, @PolyUnit float arg1);
    static @PolyUnit float min(@PolyUnit float arg0, @PolyUnit float arg1);
}

class Double { // extends Number implements Comparable<Double>
    static @PolyUnit Double valueOf(@PolyUnit double arg0);
    @PolyUnit Double(@PolyUnit double arg0);

    @PolyUnit byte byteValue(@PolyUnit Double this);
    @PolyUnit short shortValue(@PolyUnit Double this);
    @PolyUnit int intValue(@PolyUnit Double this);
    @PolyUnit long longValue(@PolyUnit Double this);
    @PolyUnit float floatValue(@PolyUnit Double this);
    @PolyUnit double doubleValue(@PolyUnit Double this);

    String toString(@UnknownUnits Double this);
    static String toString(@UnknownUnits double arg0);
    static String toHexString(@UnknownUnits double arg0);

    int hashCode(@UnknownUnits Double this);
    static int hashCode(@UnknownUnits double arg0);

    boolean isNaN(@UnknownUnits Double this);
    static boolean isNaN(@UnknownUnits double arg0);
    boolean isInfinite(@UnknownUnits Double this);
    static boolean isInfinite(@UnknownUnits double arg0);
    static boolean isFinite(@UnknownUnits double arg0);

    // handled in units checker like comparison operators
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    boolean equals(@UnknownUnits Double this, @UnknownUnits Object arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="-1")
    int compareTo(@UnknownUnits Double this, @UnknownUnits Double arg0);
    @UnitsTypeCheckAsOp(op=CheckOp.COMPARE, rhsPos="1")
    static int compare(@UnknownUnits double arg0, @UnknownUnits double arg1);

    static @PolyUnit long doubleToLongBits(@PolyUnit double arg0);
    static @PolyUnit long doubleToRawLongBits(@PolyUnit double arg0);
    static @PolyUnit double longBitsToDouble(@PolyUnit long arg0);

    // handled in units checker like plus operator
    @UnitsTypeCheckAsOp(op=CheckOp.ADD)
    static double sum(@UnknownUnits double a, @UnknownUnits double b);

    static @PolyUnit double max(@PolyUnit double arg0, @PolyUnit double arg1);
    static @PolyUnit double min(@PolyUnit double arg0, @PolyUnit double arg1);
}
